// Generated by dts-bundle v0.7.3

export * from 'nanoutils/__/index';
export * from 'nanoutils/_internal/_a2p/index';
export * from 'nanoutils/_internal/_p2a/index';
export * from 'nanoutils/_internal/_placehold/index';
export * from 'nanoutils/add/index';
export * from 'nanoutils/always/index';
export * from 'nanoutils/append/index';
export * from 'nanoutils/ascend/index';
export * from 'nanoutils/clone/index';
export * from 'nanoutils/comparator/index';
export * from 'nanoutils/complement/index';
export * from 'nanoutils/compose/index';
export * from 'nanoutils/debounce/index';
export * from 'nanoutils/dec/index';
export * from 'nanoutils/descend/index';
export * from 'nanoutils/divide/index';
export * from 'nanoutils/F/index';
export * from 'nanoutils/flatten/index';
export * from 'nanoutils/flattenObj/index';
export * from 'nanoutils/head/index';
export * from 'nanoutils/ifElse/index';
export * from 'nanoutils/inc/index';
export * from 'nanoutils/init/index';
export * from 'nanoutils/isInteger/index';
export * from 'nanoutils/isNil/index';
export * from 'nanoutils/last/index';
export * from 'nanoutils/map/index';
export * from 'nanoutils/mean/index';
export * from 'nanoutils/median/index';
export * from 'nanoutils/multiply/index';
export * from 'nanoutils/nAry/index';
export * from 'nanoutils/noop/index';
export * from 'nanoutils/not/index';
export * from 'nanoutils/pipe/index';
export * from 'nanoutils/reverse/index';
export * from 'nanoutils/subtract/index';
export * from 'nanoutils/T/index';
export * from 'nanoutils/tail/index';
export * from 'nanoutils/throttle/index';
export * from 'nanoutils/toArray/index';
export * from 'nanoutils/unless/index';
export * from 'nanoutils/unnest/index';
export * from 'nanoutils/unnestN/index';
export * from 'nanoutils/when/index';

declare module 'nanoutils/__/index' {
    export default Object
}

declare module 'nanoutils/_internal/_a2p/index' {
    export default function a2p(a: any): string
}

declare module 'nanoutils/_internal/_p2a/index' {
    export default function p2a(a: any): string[]
}

declare module 'nanoutils/_internal/_placehold/index' {
    export default function placehold(
        fn: Function,
        n?: number,
        args?: any[]
    ): Function
}

declare module 'nanoutils/add/index' {
    import {
        CurriedFunction1,
        CurriedFunction2
    } from '../../misc/types/fn';
    
    function add<T1, T2>(): CurriedFunction2<T1, T2, number>
    function add<T1, T2>(t1: T1): CurriedFunction1<T2, number>
    function add<T1, T2>(t1: T1, t2: T2): number
    
    export default add;
}

declare module 'nanoutils/always/index' {
    export default function always<T>(value: T): T
}

declare module 'nanoutils/append/index' {
    import { CurriedFunction2 } from 'nanoutils/--/misc/types/fn';
    
    export default function append<T>(): CurriedFunction2<T, T[], T[]>
}

declare module 'nanoutils/ascend/index' {
    export default function ascend<T, U>(
        cb: (payload: T) => U
    ): (a: T, b: T) => number
}

declare module 'nanoutils/clone/index' {
    export default function clone<T>(value: T): T
}

declare module 'nanoutils/comparator/index' {
    export default function comparator<T>(
        cb: (a: T, b: T) => boolean
    ): (a: T, b: T) => number
}

declare module 'nanoutils/complement/index' {
    export default function complement(cb: Function): (...args: any[]) => boolean
}

declare module 'nanoutils/compose/index' {
    export default function compose<R2, R1>(
        f2: (a: R1) => R2,
        f1: () => R1
    ): () => R2
    export default function compose<R3, R2, R1>(
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: () => R1
    ): () => R3
    export default function compose<R4, R3, R2, R1>(
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: () => R1
    ): () => R4
    export default function compose<R5, R4, R3, R2, R1>(
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: () => R1
    ): () => R5
    export default function compose<R6, R5, R4, R3, R2, R1>(
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: () => R1
    ): () => R6
    export default function compose<R7, R6, R5, R4, R3, R2, R1>(
        f7: (a: R6) => R7,
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: () => R1
    ): () => R7
    export default function compose<A1, R2, R1>(
        f2: (a: R1) => R2,
        f1: (a1: A1) => R1
    ): (a1: A1) => R2
    export default function compose<A1, R3, R2, R1>(
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1) => R1
    ): (a1: A1) => R3
    export default function compose<A1, R4, R3, R2, R1>(
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1) => R1
    ): (a1: A1) => R4
    export default function compose<A1, R5, R4, R3, R2, R1>(
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1) => R1
    ): (a1: A1) => R5
    export default function compose<A1, R6, R5, R4, R3, R2, R1>(
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1) => R1
    ): (a1: A1) => R6
    export default function compose<A1, R7, R6, R5, R4, R3, R2, R1>(
        f7: (a: R6) => R7,
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1) => R1
    ): (a1: A1) => R7
    export default function compose<A1, A2, R2, R1>(
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2) => R1
    ): (a1: A1, a2: A2) => R2
    export default function compose<A1, A2, R3, R2, R1>(
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2) => R1
    ): (a1: A1, a2: A2) => R3
    export default function compose<A1, A2, R4, R3, R2, R1>(
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2) => R1
    ): (a1: A1, a2: A2) => R4
    export default function compose<A1, A2, R5, R4, R3, R2, R1>(
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2) => R1
    ): (a1: A1, a2: A2) => R5
    export default function compose<A1, A2, R6, R5, R4, R3, R2, R1>(
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2) => R1
    ): (a1: A1, a2: A2) => R6
    export default function compose<A1, A2, R7, R6, R5, R4, R3, R2, R1>(
        f7: (a: R6) => R7,
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2) => R1
    ): (a1: A1, a2: A2) => R7
    export default function compose<A1, A2, A3, R2, R1>(
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3) => R1
    ): (a1: A1, a2: A2, a3: A3) => R2
    export default function compose<A1, A2, A3, R3, R2, R1>(
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3) => R1
    ): (a1: A1, a2: A2, a3: A3) => R3
    export default function compose<A1, A2, A3, R4, R3, R2, R1>(
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3) => R1
    ): (a1: A1, a2: A2, a3: A3) => R4
    export default function compose<A1, A2, A3, R5, R4, R3, R2, R1>(
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3) => R1
    ): (a1: A1, a2: A2, a3: A3) => R5
    export default function compose<A1, A2, A3, R6, R5, R4, R3, R2, R1>(
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3) => R1
    ): (a1: A1, a2: A2, a3: A3) => R6
    export default function compose<A1, A2, A3, R7, R6, R5, R4, R3, R2, R1>(
        f7: (a: R6) => R7,
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3) => R1
    ): (a1: A1, a2: A2, a3: A3) => R7
    export default function compose<A1, A2, A3, A4, R2, R1>(
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R2
    export default function compose<A1, A2, A3, A4, R3, R2, R1>(
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R3
    export default function compose<A1, A2, A3, A4, R4, R3, R2, R1>(
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R4
    export default function compose<A1, A2, A3, A4, R5, R4, R3, R2, R1>(
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R5
    export default function compose<A1, A2, A3, A4, R6, R5, R4, R3, R2, R1>(
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R6
    export default function compose<A1, A2, A3, A4, R7, R6, R5, R4, R3, R2, R1>(
        f7: (a: R6) => R7,
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R7
    export default function compose<R2, R1>(
        f2: (a: R1) => R2,
        f1: (...args: any[]) => R1
    ): (...args: any[]) => R2
    export default function compose<R3, R2, R1>(
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (...args: any[]) => R1
    ): (...args: any[]) => R3
    export default function compose<R4, R3, R2, R1>(
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (...args: any[]) => R1
    ): (...args: any[]) => R4
    export default function compose<R5, R4, R3, R2, R1>(
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (...args: any[]) => R1
    ): (...args: any[]) => R5
    export default function compose<R6, R5, R4, R3, R2, R1>(
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (...args: any[]) => R1
    ): (...args: any[]) => R6
    export default function compose<R7, R6, R5, R4, R3, R2, R1>(
        f7: (a: R6) => R7,
        f6: (a: R5) => R6,
        f5: (a: R4) => R5,
        f4: (a: R3) => R4,
        f3: (a: R2) => R3,
        f2: (a: R1) => R2,
        f1: (...args: any[]) => R1
    ): (...args: any[]) => R7
    export default function compose(
        f7: (a: any) => any,
        f6: (a: any) => any,
        f5: (a: any) => any,
        f4: (a: any) => any,
        f3: (a: any) => any,
        f2: (a: any) => any,
        f1: () => any,
        ...funcs: Array<(...args: any[]) => any>
    ): (...args: any[]) => any
    export default function compose(
        funcs: Array<(...args: any[]) => any>
    ): (...args: any[]) => any
}

declare module 'nanoutils/debounce/index' {
    export default function debounce<T>(time: number, cb: T): T
}

declare module 'nanoutils/dec/index' {
    export default function dec<T>(n: T): number
}

declare module 'nanoutils/descend/index' {
    export default function descend<T, U>(
        cb: (payload: T) => U
    ): (a: T, b: T) => number
}

declare module 'nanoutils/divide/index' {
    import {
        CurriedFunction1,
        CurriedFunction2
    } from '../../misc/types/fn';
    
    function divide<T1, T2>(): CurriedFunction2<T1, T2, number>
    function divide<T1, T2>(t1: T1): CurriedFunction1<T2, number>
    function divide<T1, T2>(t1: T1, t2: T2): number
    
    export default divide;
}

declare module 'nanoutils/F/index' {
    export default function F(): false
}

declare module 'nanoutils/flatten/index' {
    export default function flattenDeep(arr: any[] | any): any[]
}

declare module 'nanoutils/flattenObj/index' {
    export default function flattenObj(obj: object): object
}

declare module 'nanoutils/head/index' {
    export default function head<T>(a: T[] | String): T | String
}

declare module 'nanoutils/ifElse/index' {
    export default function unless<A, B, C>(
        cond: (arg: A) => boolean,
        ifTrue: (arg: A) => B,
        ifFalse: (arg: A) => C
    ): (arg: A) => B | C
}

declare module 'nanoutils/inc/index' {
    export default function inc<T>(n: T): number
}

declare module 'nanoutils/init/index' {
    export default function init<T>(a: T[] | string): T[] | string
}

declare module 'nanoutils/isInteger/index' {
    export default function isInteger(num: number): boolean
}

declare module 'nanoutils/isNil/index' {
    export default function isNil(val: any): boolean
}

declare module 'nanoutils/last/index' {
    export default function last<T>(a: T[] | String): T | String
}

declare module 'nanoutils/map/index' {
    import { 
        CurriedFunction1,
        CurriedFunction2,
        Functor,
    } from '../../misc/types/fn';
    
    export default function map<T1, T2>(): CurriedFunction2<CurriedFunction1<T1, T2>, Functor<T1>, Functor<T2>>;
}

declare module 'nanoutils/mean/index' {
    export default function mean(nums: number[]): number
}

declare module 'nanoutils/median/index' {
    export default function median(nums: number[]): number
}

declare module 'nanoutils/multiply/index' {
    import {
        CurriedFunction1,
        CurriedFunction2
    } from '../../misc/types/fn';
    
    function multiply<T1, T2>(): CurriedFunction2<T1, T2, number>
    function multiply<T1, T2>(t1: T1): CurriedFunction1<T2, number>
    function multiply<T1, T2>(t1: T1, t2: T2): number
    
    export default multiply;
}

declare module 'nanoutils/nAry/index' {
    export default function nAry<T>(n: number, fn: T): T
}

declare module 'nanoutils/noop/index' {
    export default function F(): false
}

declare module 'nanoutils/not/index' {
    export default function not(a: any): boolean
}

declare module 'nanoutils/pipe/index' {
    function pipe<R1, R2>(f1: () => R1, f2: (a: R1) => R2): () => R2
    function pipe<R1, R2, R3>(
        f1: () => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3
    ): () => R3
    function pipe<R1, R2, R3, R4>(
        f1: () => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4
    ): () => R4
    function pipe<R1, R2, R3, R4, R5>(
        f1: () => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5
    ): () => R5
    function pipe<R1, R2, R3, R4, R5, R6>(
        f1: () => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6
    ): () => R6
    function pipe<R1, R2, R3, R4, R5, R6, R7>(
        f1: () => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7
    ): () => R7
    function pipe<R1, R2, R3, R4, R5, R6, R7>(
        f1: () => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7,
        ...funcs: Array<(a: any) => any>
    ): () => any
    function pipe<A1, R1, R2>(
        f1: (a1: A1) => R1,
        f2: (a: R1) => R2
    ): (a1: A1) => R2
    function pipe<A1, R1, R2, R3>(
        f1: (a1: A1) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3
    ): (a1: A1) => R3
    function pipe<A1, R1, R2, R3, R4>(
        f1: (a1: A1) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4
    ): (a1: A1) => R4
    function pipe<A1, R1, R2, R3, R4, R5>(
        f1: (a1: A1) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5
    ): (a1: A1) => R5
    function pipe<A1, R1, R2, R3, R4, R5, R6>(
        f1: (a1: A1) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6
    ): (a1: A1) => R6
    function pipe<A1, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7
    ): (a1: A1) => R7
    function pipe<A1, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7,
        ...funcs: Array<(a: any) => any>
    ): (a1: A1) => any
    function pipe<A1, A2, R1, R2>(
        f1: (a1: A1, a2: A2) => R1,
        f2: (a: R1) => R2
    ): (a1: A1, a2: A2) => R2
    function pipe<A1, A2, R1, R2, R3>(
        f1: (a1: A1, a2: A2) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3
    ): (a1: A1, a2: A2) => R3
    function pipe<A1, A2, R1, R2, R3, R4>(
        f1: (a1: A1, a2: A2) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4
    ): (a1: A1, a2: A2) => R4
    function pipe<A1, A2, R1, R2, R3, R4, R5>(
        f1: (a1: A1, a2: A2) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5
    ): (a1: A1, a2: A2) => R5
    function pipe<A1, A2, R1, R2, R3, R4, R5, R6>(
        f1: (a1: A1, a2: A2) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6
    ): (a1: A1, a2: A2) => R6
    function pipe<A1, A2, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1, a2: A2) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7
    ): (a1: A1, a2: A2) => R7
    function pipe<A1, A2, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1, a2: A2) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7,
        ...funcs: Array<(a: any) => any>
    ): (a1: A1, a2: A2) => any
    function pipe<A1, A2, A3, R1, R2>(
        f1: (a1: A1, a2: A2, a3: A3) => R1,
        f2: (a: R1) => R2
    ): (a1: A1, a2: A2, a3: A3) => R2
    function pipe<A1, A2, A3, R1, R2, R3>(
        f1: (a1: A1, a2: A2, a3: A3) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3
    ): (a1: A1, a2: A2, a3: A3) => R3
    function pipe<A1, A2, A3, R1, R2, R3, R4>(
        f1: (a1: A1, a2: A2, a3: A3) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4
    ): (a1: A1, a2: A2, a3: A3) => R4
    function pipe<A1, A2, A3, R1, R2, R3, R4, R5>(
        f1: (a1: A1, a2: A2, a3: A3) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5
    ): (a1: A1, a2: A2, a3: A3) => R5
    function pipe<A1, A2, A3, R1, R2, R3, R4, R5, R6>(
        f1: (a1: A1, a2: A2, a3: A3) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6
    ): (a1: A1, a2: A2, a3: A3) => R6
    function pipe<A1, A2, A3, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1, a2: A2, a3: A3) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7
    ): (a1: A1, a2: A2, a3: A3) => R7
    function pipe<A1, A2, A3, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1, a2: A2, a3: A3) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7,
        ...funcs: Array<(a: any) => any>
    ): (a1: A1, a2: A2, a3: A3) => any
    function pipe<A1, A2, A3, A4, R1, R2>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1,
        f2: (a: R1) => R2
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R2
    function pipe<A1, A2, A3, A4, R1, R2, R3>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R3
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R4
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4, R5>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R5
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4, R5, R6>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R6
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => R7
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7,
        ...funcs: Array<(a: any) => any>
    ): (a1: A1, a2: A2, a3: A3, a4: A4) => any
    function pipe<A1, A2, A3, A4, R1, R2>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R1,
        f2: (a: R1) => R2
    ): (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R2
    function pipe<A1, A2, A3, A4, R1, R2, R3>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3
    ): (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R3
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4
    ): (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R4
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4, R5>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5
    ): (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R5
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4, R5, R6>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6
    ): (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R6
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7
    ): (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R7
    function pipe<A1, A2, A3, A4, R1, R2, R3, R4, R5, R6, R7>(
        f1: (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => R1,
        f2: (a: R1) => R2,
        f3: (a: R2) => R3,
        f4: (a: R3) => R4,
        f5: (a: R4) => R5,
        f6: (a: R5) => R6,
        f7: (a: R6) => R7,
        ...funcs: Array<(a: any) => any>
    ): (a1: A1, a2: A2, a3: A3, a4: A4, ...args: any[]) => any
    function pipe(
        funcs: Array<(...args: any[]) => any>
    ): (...args: any[]) => any
}

declare module 'nanoutils/reverse/index' {
    export default function reverse<T>(arg: T): T
}

declare module 'nanoutils/subtract/index' {
    import {
        CurriedFunction1,
        CurriedFunction2
    } from '../../misc/types/fn';
    
    function subtract<T1, T2>(): CurriedFunction2<T1, T2, number>
    function subtract<T1, T2>(t1: T1): CurriedFunction1<T2, number>
    function subtract<T1, T2>(t1: T1, t2: T2): number
    
    export default subtract;
}

declare module 'nanoutils/T/index' {
    export default function F(): true
}

declare module 'nanoutils/tail/index' {
    export default function tail<T>(a: T[] | string): T[] | string
}

declare module 'nanoutils/throttle/index' {
    export default function throttle<T>(time: number, cb: T): T
}

declare module 'nanoutils/toArray/index' {
    export default function toArray<T>(...args: T[]): T
}

declare module 'nanoutils/unless/index' {
    export default function unless<A, B>(
        cond: (arg: A) => boolean,
        cb: (arg: A) => B
    ): (arg: A) => A | B
}

declare module 'nanoutils/unnest/index' {
    export default function unnest(arr: any[] | any): any[]
}

declare module 'nanoutils/unnestN/index' {
    export default function unnestN(n: number, arr: any[] | any): any[]
}

declare module 'nanoutils/when/index' {
    export default function when<A, B>(
        cond: (arg: A) => boolean,
        cb: (arg: A) => B
    ): (arg: A) => A | B
}

export interface CurriedFunction1<T1, R> {
    (): CurriedFunction1<T1, R>;
    (t1: T1): R;
}

export interface CurriedFunction2<T1, T2, R> {
    (): CurriedFunction2<T1, T2, R>;
    (t1: T1): CurriedFunction1<T2, R>;
    (t1: T1, t2: T2): R;
}

export interface CurriedFunction3<T1, T2, T3, R> {
    (): CurriedFunction3<T1, T2, T3, R>;
    (t1: T1): CurriedFunction2<T2, T3, R>;
    (t1: T1, t2: T2): CurriedFunction1<T3, R>;
    (t1: T1, t2: T2, t3: T3): R;
}

export interface CurriedFunction4<T1, T2, T3, T4, R> {
    (): CurriedFunction4<T1, T2, T3, T4, R>;
    (t1: T1): CurriedFunction3<T2, T3, T4, R>;
    (t1: T1, t2: T2): CurriedFunction2<T3, T4, R>;
    (t1: T1, t2: T2, t3: T3): CurriedFunction1<T4, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4): R;
}

export interface CurriedFunction5<T1, T2, T3, T4, T5, R> {
    (): CurriedFunction5<T1, T2, T3, T4, T5, R>;
    (t1: T1): CurriedFunction4<T2, T3, T4, T5, R>;
    (t1: T1, t2: T2): CurriedFunction3<T3, T4, T5, R>;
    (t1: T1, t2: T2, t3: T3): CurriedFunction2<T4, T5, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4): CurriedFunction1<T5, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): R;
}

export interface CurriedFunction6<T1, T2, T3, T4, T5, T6, R> {
    (): CurriedFunction6<T1, T2, T3, T4, T5, T6, R>;
    (t1: T1): CurriedFunction5<T2, T3, T4, T5, T6, R>;
    (t1: T1, t2: T2): CurriedFunction4<T3, T4, T5, T6, R>;
    (t1: T1, t2: T2, t3: T3): CurriedFunction3<T4, T5, T6, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4): CurriedFunction2<T5, T6, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): CurriedFunction1<T6, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6): R;
}

export interface CurriedFunction7<T1, T2, T3, T4, T5, T6, T7, R> {
    (): CurriedFunction7<T1, T2, T3, T4, T5, T6, T7, R>;
    (t1: T1): CurriedFunction6<T2, T3, T4, T5, T6, T7, R>;
    (t1: T1, t2: T2): CurriedFunction5<T3, T4, T5, T6, T7, R>;
    (t1: T1, t2: T2, t3: T3): CurriedFunction4<T4, T5, T6, T7, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4): CurriedFunction3<T5, T6, T7, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): CurriedFunction2<T6, T7, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6): CurriedFunction1<T7, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7): R;
}

export interface CurriedFunction8<T1, T2, T3, T4, T5, T6, T7, T8, R> {
    (): CurriedFunction8<T1, T2, T3, T4, T5, T6, T7, T8, R>;
    (t1: T1): CurriedFunction7<T2, T3, T4, T5, T6, T7, T8, R>;
    (t1: T1, t2: T2): CurriedFunction6<T3, T4, T5, T6, T7, T8, R>;
    (t1: T1, t2: T2, t3: T3): CurriedFunction5<T4, T5, T6, T7, T8, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4): CurriedFunction4<T5, T6, T7, T8, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): CurriedFunction3<T6, T7, T8, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6): CurriedFunction2<T7, T8, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7): CurriedFunction1<T8, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8): R;
}


export interface CurriedFunction9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> {
    (): CurriedFunction9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R>;
    (t1: T1): CurriedFunction8<T2, T3, T4, T5, T6, T7, T8, T9, R>;
    (t1: T1, t2: T2): CurriedFunction7<T3, T4, T5, T6, T7, T8, T9, R>;
    (t1: T1, t2: T2, t3: T3): CurriedFunction6<T4, T5, T6, T7, T8, T9, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4): CurriedFunction5<T5, T6, T7, T8, T9, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): CurriedFunction4<T6, T7, T8, T9, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6): CurriedFunction3<T7, T8, T9, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7): CurriedFunction2<T8, T9, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8): CurriedFunction1<T9, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9): R;
}

export interface CurriedFunction10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> {
    (): CurriedFunction10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R>;
    (t1: T1): CurriedFunction9<T2, T3, T4, T5, T6, T7, T8, T9, T10, R>;
    (t1: T1, t2: T2): CurriedFunction8<T3, T4, T5, T6, T7, T8, T9, T10, R>;
    (t1: T1, t2: T2, t3: T3): CurriedFunction7<T4, T5, T6, T7, T8, T9, T10, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4): CurriedFunction6<T5, T6, T7, T8, T9, T10, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): CurriedFunction5<T6, T7, T8, T9, T10, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6): CurriedFunction4<T7, T8, T9, T10, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7): CurriedFunction3<T8, T9, T10, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8): CurriedFunction2<T9, T10, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9): CurriedFunction1<T10, R>;
    (t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10): R;
}

export interface Functor<T> {
    (t: T): T[] | Object;
}

